"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[477],{1491:(e,t,r)=>{function o(e){return e.replace(/[^a-zA-Z0-9_]/g,"_").toLowerCase()}function n(e){var t,r,n,s;let a=e.description||"";a.length>1024&&(console.warn("Tool description for '".concat(e.name,"' is too long (").concat(a.length," characters). Truncating to 1024 characters.")),a=a.substring(0,1021)+"...");let i=null!==(n=null===(t=e.input_schema)||void 0===t?void 0:t.properties)&&void 0!==n?n:Object.create(null),c=null!==(s=null===(r=e.input_schema)||void 0===r?void 0:r.required)&&void 0!==s?s:[];return{type:"function",function:{name:o(e.name),description:a,parameters:{type:"object",properties:i,required:c,additionalProperties:!1}}}}function s(e,t){let r=[];for(let o of e)if("system"===o.role){if("string"==typeof o.content)t=o.content;else if(Array.isArray(o.content)){let e=o.content.find(e=>"text"===e.type);e&&"text"in e&&(t=e.text)}}else r.push({role:"tool"===o.role?"user":o.role,content:o.content});let o={messages:r};return t&&(o.system=t),o}function a(e,t){let r=[];for(let t of e)if(Array.isArray(t.content)){let e=t.content.find(e=>"tool_use"===e.type),o=t.content.find(e=>"tool_result"===e.type),n=t.content.find(e=>"text"===e.type);e?r.push({role:"assistant",content:(null==n?void 0:n.text)||"",tool_calls:[{id:e.id,type:"function",function:{name:e.name,arguments:JSON.stringify(e.input)}}],name:t.name}):o?r.push({role:"tool",tool_call_id:o.tool_use_id,content:o.content}):r.push({role:t.role,content:(null==n?void 0:n.text)||"",name:t.name})}else r.push({role:t.role,content:t.content,name:t.name});let o={messages:r};return t&&t.length>0&&(o.tools=t.map(n),o.tool_choice="auto",o.function_calling={allow_nested_function_calls:!0,allow_multiple_function_calls:!0}),o}function i(e){return{role:e.role,content:e.content,name:e.toolInput}}r.d(t,{HG:()=>s,NQ:()=>a,nJ:()=>o,r3:()=>i})},6714:(e,t,r)=>{function o(e,t){if(!e||"anthropic"===e)return{type:"anthropic",settings:{apiKey:t.anthropicApiKey||t.apiKey||""}};if("openrouter"===e)return{type:"openrouter",settings:{apiKey:t.openRouterApiKey||"",baseUrl:t.openRouterBaseUrl||"https://openrouter.ai/api/v1"}};if("openai"===e)return{type:"openai",settings:{apiKey:t.openaiApiKey||"",baseUrl:t.openaiBaseUrl||"https://api.openai.com/v1",organizationId:t.openaiOrgId||""}};throw Error("Unknown provider type: ".concat(e))}function n(e){switch(e){case"anthropic":return["claude-3-7-sonnet-20250219","claude-3-5-sonnet-20241022","claude-3-5-haiku-20241022","claude-3-opus-20240229"];case"openai":return["gpt-4-turbo","gpt-4o","gpt-4o-mini","gpt-4"];case"openrouter":return["deepseek/deepseek-r1","anthropic/claude-3.5-sonnet","google/gemini-2.0-flash-thinking-exp:free","google/gemini-2.0-flash-exp:free","openai/o1","openai/o1-preview","openai/gpt-4-turbo"];default:return[]}}r.d(t,{SM:()=>n,Xz:()=>o})},9632:(e,t,r)=>{r.d(t,{C7:()=>c,G8:()=>a,LZ:()=>u,nh:()=>m,ue:()=>g});var o=r(6714),n=r(3950),s=r(1491);let a=7,i=async()=>new Promise((e,t)=>{let r=indexedDB.open("kibitz_db",a);r.onerror=()=>t(r.error),r.onsuccess=()=>e(r.result),r.onupgradeneeded=e=>{let t=e.target.result;if(e.oldVersion<1){let e=t.createObjectStore("projects",{keyPath:"id"});e.createIndex("createdAt","createdAt"),e.createIndex("updatedAt","updatedAt"),e.createIndex("name","name"),e.createIndex("order","order"),t.createObjectStore("appState",{keyPath:"id"}),t.createObjectStore("mcpServers",{keyPath:"id"}).createIndex("name","name"),e.createIndex("settings.systemPrompt","settings.systemPrompt"),e.createIndex("conversations.name","conversations.name",{multiEntry:!0}),e.createIndex("conversations.messages.content","conversations.messages.content",{multiEntry:!0})}else if(e.oldVersion<2){let t=e.target.transaction;if(!t){console.error("No transaction available during upgrade");return}let r=t.objectStore("projects");r.indexNames.contains("order")||r.createIndex("order","order"),r.openCursor().onsuccess=e=>{let t=e.target.result;if(t){let e=t.value;"number"!=typeof e.order&&(e.order=t.key,t.update(e)),t.continue()}}}else if(e.oldVersion<3)t.createObjectStore("mcpServers",{keyPath:"id"}).createIndex("name","name");else if(e.oldVersion<4){let t=e.target.transaction;if(!t){console.error("No transaction available during upgrade");return}let r=t.objectStore("projects");r.openCursor().onsuccess=e=>{let t=e.target.result;if(t){let e=t.value;e.settings||(e.settings={mcpServers:[],model:"claude-3-5-sonnet-20241022",systemPrompt:"",elideToolResults:!1}),e.settings&&((["claude-2.0","claude-2.1","claude-2","claude-instant"].includes(e.settings.model)||!e.settings.model)&&(e.settings.model="claude-3-5-sonnet-20241022"),e.settings.provider="anthropic",e.settings.apiKey&&(e.settings.anthropicApiKey=e.settings.apiKey),e.settings.openRouterApiKey="",e.settings.openRouterBaseUrl="");try{t.update(e)}catch(r){console.error("Error updating project during migration:",r);try{t.update({...e,settings:{...e.settings,provider:"anthropic"}})}catch(e){console.error("Critical error during migration fallback:",e)}}t.continue()}},r.openCursor().onerror=e=>{console.error("Error during v4 migration:",e)}}else if(e.oldVersion<5){let t=e.target.transaction;if(!t){console.error("No transaction available during upgrade");return}let r=t.objectStore("projects");r.openCursor().onsuccess=e=>{let t=e.target.result;if(t){let e=t.value;try{e.settings&&(e.settings.providerConfig=(0,o.Xz)(e.settings.provider,e.settings),t.update(e))}catch(e){console.error("Error updating project during v5 migration:",e)}t.continue()}},r.openCursor().onerror=e=>{console.error("Error during v5 migration:",e)}}else if(e.oldVersion<6){let t=e.target.transaction;if(!t){console.error("No transaction available during upgrade");return}let r=t.objectStore("projects");r.openCursor().onsuccess=e=>{let t=e.target.result;if(t){let e=t.value;e.conversations&&Array.isArray(e.conversations)&&(e.conversations=e.conversations.map(e=>(e.messages&&Array.isArray(e.messages)&&(e.messages=e.messages.map(e=>{try{let t=(0,s.r3)(e);return{...e,role:"system"===t.role?"user":"tool"===t.role?"assistant":t.role,content:t.content,toolInput:t.name}}catch(t){return console.error("Error migrating message:",t,e),e}})),e)));try{e.settings&&(e.settings.providerConfig=(0,o.Xz)(e.settings.provider,e.settings),t.update(e))}catch(e){console.error("Error updating project during v6 migration:",e)}t.continue()}},r.openCursor().onerror=e=>{console.error("Error during v6 migration:",e)}}else if(e.oldVersion<7){let t=e.target.transaction;if(!t){console.error("No transaction available during upgrade");return}let r=t.objectStore("projects");r.openCursor().onsuccess=e=>{let t=e.target.result;if(t){let e=t.value;try{e.settings&&(e.settings.savedPrompts||(e.settings.savedPrompts=[]),t.update(e))}catch(e){console.error("Error updating project during v7 migration:",e)}t.continue()}},r.openCursor().onerror=e=>{console.error("Error during v7 migration:",e)}}}}),c=async()=>{let e=await i(),t=e=>(e.settings?e.settings={...n.Ab,...e.settings,provider:e.settings.provider||n.Ab.provider,providerConfig:e.settings.providerConfig||(0,o.Xz)(e.settings.provider||n.Ab.provider,e.settings)}:e.settings={...n.Ab},e);return new Promise((r,o)=>{let n=e.transaction(["projects","appState"],"readonly"),s=n.objectStore("projects"),a=n.objectStore("appState"),i=[],c={};s.index("order").openCursor().onsuccess=e=>{let r=e.target.result;r&&(i.push(t(r.value)),r.continue())},a.get("activeIds").onsuccess=e=>{let t=e.target.result;t&&(c.activeProjectId=t.activeProjectId,c.activeConversationId=t.activeConversationId)},n.oncomplete=()=>{r({projects:i,activeProjectId:c.activeProjectId||null,activeConversationId:c.activeConversationId||null})},n.onerror=()=>o(n.error)})},l=e=>{if(e instanceof Date)return isNaN(e.getTime())?new Date().toISOString():e.toISOString();if("string"==typeof e){let t=new Date(e);return isNaN(t.getTime())?e:t.toISOString()}if("number"==typeof e){let t=new Date(e);if(!isNaN(t.getTime()))return t.toISOString()}return new Date().toISOString()},d=e=>{if(e instanceof Date&&!isNaN(e.getTime()))return e;let t=new Date(e||Date.now());return isNaN(t.getTime())?new Date:t},p=e=>{let t=JSON.parse(JSON.stringify({...e,settings:{...e.settings,mcpServerIds:e.settings.mcpServerIds||[],provider:e.settings.provider||"anthropic",providerConfig:e.settings.providerConfig||(0,o.Xz)("anthropic",e.settings)},conversations:e.conversations.map(e=>({...e,lastUpdated:l(e.lastUpdated),messages:e.messages.map(e=>({...e,timestamp:l(e.timestamp)}))}))}));return t.conversations=t.conversations.map(e=>({...e,lastUpdated:d(e.lastUpdated),messages:e.messages.map(e=>({...e,timestamp:d(e.timestamp)}))})),t.createdAt=d(e.createdAt),t.updatedAt=d(e.updatedAt),"number"!=typeof t.order&&(t.order=Date.now()),t},u=async e=>{let t=await i();return new Promise((r,o)=>{let n=t.transaction(["projects","appState"],"readwrite");n.objectStore("projects").clear(),e.projects.forEach(e=>{let t=p(e);n.objectStore("projects").add(t)}),n.objectStore("appState").put({id:"activeIds",activeProjectId:e.activeProjectId,activeConversationId:e.activeConversationId}),n.oncomplete=()=>r(),n.onerror=()=>o(n.error)})},v=e=>JSON.parse(JSON.stringify({...e,ws:void 0,status:"disconnected"})),g=async e=>{let t=await i();return new Promise((r,o)=>{let n=t.transaction(["mcpServers"],"readwrite"),s=n.objectStore("mcpServers");try{let t=s.clear();t.onsuccess=()=>{let t=e.map(e=>new Promise((t,r)=>{let o=v(e),n=s.add(o);n.onsuccess=()=>t(),n.onerror=()=>r(n.error)}));Promise.all(t).then(()=>r()).catch(e=>{console.error("Error saving servers:",e),o(e)})},t.onerror=e=>{console.error("Error clearing servers:",e),o(t.error)}}catch(e){console.error("Error in saveMcpServers transaction:",e),o(e)}n.onerror=()=>{console.error("Transaction error in saveMcpServers:",n.error),o(n.error)}})},m=async()=>{let e=await i();return new Promise((t,r)=>{let o=[],n=e.transaction(["mcpServers"],"readonly");n.objectStore("mcpServers").openCursor().onsuccess=e=>{let t=e.target.result;t&&(o.push(t.value),t.continue())},n.oncomplete=()=>t(o),n.onerror=()=>r(n.error)})}},3950:(e,t,r)=>{r.d(t,{Ab:()=>i,Pj:()=>c,pi:()=>a});var o=r(9827),n=r(9632);let s=()=>Math.random().toString(36).substring(7),a=e=>{switch(e){case"openai":return"gpt-4o";case"openrouter":return"openai/gpt-4-turbo-preview";default:return"claude-3-5-sonnet-20241022"}},i={providerConfig:{type:"anthropic",settings:{apiKey:""}},provider:"anthropic",model:"claude-3-5-sonnet-20241022",systemPrompt:"",elideToolResults:!1,mcpServerIds:[],showAllMessages:!0,messageWindowSize:30},c=(0,o.v)((e,t)=>{let r=new Map,o=new Map,a=e=>{console.log("saving ".concat(JSON.stringify({keys:e}))),fetch("".concat("/kibitz:kibitz:nick.hypr","/api/keys"),{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({keys:e})}).catch(e=>{console.error("Failed to save API keys:",e)})},c=e=>{let t=o.get(e);t&&(clearTimeout(t),o.delete(e));let n=r.get(e);n&&(n.close(),r.delete(e))},l=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5e3,r=o.get(e.id);r&&clearTimeout(r);let n=setTimeout(async()=>{try{await d(e)}catch(r){console.error("Reconnection failed for ".concat(e.name)),l(e,Math.min(2*t,3e4))}},t);o.set(e.id,n)},d=async o=>{try{e(e=>({servers:e.servers.map(e=>e.id===o.id?{...e,status:"connecting",error:void 0}:e)}));let s=new WebSocket(o.uri);return new Promise((a,i)=>{let d=setTimeout(()=>{s.close(),i(Error("Connection timeout"))},1e4);s.onopen=()=>{clearTimeout(d),r.set(o.id,s),s.send(JSON.stringify({jsonrpc:"2.0",method:"initialize",params:{protocolVersion:"0.1.0",clientInfo:{name:"llm-chat",version:"1.0.0"},capabilities:{tools:{}}},id:1}))},s.onclose=()=>{clearTimeout(d),c(o.id);let r={servers:t().servers.map(e=>e.id===o.id?{...e,status:"disconnected",error:"Connection closed"}:e)};e(r),(0,n.ue)(r.servers).catch(e=>{console.error("Error saving MCP servers on disconnect:",e)}),l(o)},s.onerror=()=>{clearTimeout(d),console.log("WebSocket error (trying to reconnect...)"),c(o.id),e(e=>({servers:e.servers.map(e=>e.id===o.id?{...e,status:"error",error:"Connection error"}:e)})),l(o,0),i(Error("WebSocket connection error"))},s.onmessage=r=>{try{let i=JSON.parse(r.data);if(1===i.id)s.send(JSON.stringify({jsonrpc:"2.0",method:"notifications/initialized"})),s.send(JSON.stringify({jsonrpc:"2.0",method:"tools/list",id:2}));else if(2===i.id){if(i.error)return console.log("Received unexpected WS-MCP message:",i.results),o;let r=i.result.tools.map(e=>({...e,input_schema:e.inputSchema})),c={...o,status:"connected",error:void 0,tools:r,connection:s},l={servers:t().servers.map(e=>e.id===o.id?c:e)};e(l),(0,n.ue)(l.servers).catch(e=>{console.error("Error saving MCP servers:",e)}),a(c)}}catch(e){return console.error("Error parsing WebSocket message"),{...o,status:"error",error:"Error parsing WebSocket message"}}}})}catch(e){return console.error("Failed to connect to server ".concat(o.name)),{...o,status:"error",error:"Failed to connect"}}};return{projects:[],activeProjectId:null,activeConversationId:null,initialized:!1,servers:[],apiKeys:{},hasLoadedApiKeysFromServer:!1,saveApiKeysToServer:a,initialize:async()=>{if(!t().initialized)try{let{apiKeys:a}=t();if(0===Object.keys(a).length&&!t().hasLoadedApiKeysFromServer)try{let t=await fetch("".concat("/kibitz:kibitz:nick.hypr","/api/keys"));if(t.ok){let r=await t.json();r.keys&&e({apiKeys:r.keys,hasLoadedApiKeysFromServer:!0})}}catch(e){console.error("Failed to load API keys:",e)}let c=await (0,n.nh)(),l=[];for(let e of c)try{let t=await d(e);l.push(t)}catch(t){console.error("Initial connection failed for ".concat(e.name,":"),t),l.push({...e,status:"error",error:"Failed to connect"})}if(e({servers:l}),0===c.length)try{let e=await t().attemptLocalMcpConnection();e&&(console.log("Connected to local MCP server"),await (0,n.ue)([...l,e]))}catch(e){console.error("Failed to connect to local MCP:",e)}else await (0,n.ue)(l);let p=await (0,n.C7)(),u=p.projects.length>0;if(console.log("Loading projects from IndexedDB:",JSON.stringify(p)),u)e({projects:p.projects,activeProjectId:p.activeProjectId,activeConversationId:p.activeProjectId&&p.activeConversationId?p.activeConversationId:null});else{var r,o;let n={id:s(),name:"(New Chat)",lastUpdated:new Date,messages:[],createdAt:new Date},{apiKeys:a}=t(),c={id:s(),name:"Default Project",settings:{...i,apiKey:null!==(r=a.apiKey)&&void 0!==r?r:"",groqApiKey:null!==(o=a.groqApiKey)&&void 0!==o?o:"",mcpServers:[]},conversations:[n],createdAt:new Date,updatedAt:new Date,order:Date.now()};e({projects:[c],activeProjectId:c.id,activeConversationId:n.id})}e({initialized:!0})}catch(r){console.error("Error initializing data");let t={id:s(),name:"Default Project",settings:{...i,mcpServers:[]},conversations:[],createdAt:new Date,updatedAt:new Date,order:Date.now()};e({projects:[t],activeProjectId:t.id,initialized:!0})}},createProject:(r,o)=>{let{projects:a,activeProjectId:c}=t(),l=a.find(e=>e.id===c),d=s(),p=t().servers.filter(e=>"connected"===e.status).map(e=>e.id),u={id:d,name:r,settings:{...i,...l&&{apiKey:l.settings.apiKey,groqApiKey:l.settings.groqApiKey,systemPrompt:""},mcpServerIds:p,...o},conversations:[],createdAt:new Date,updatedAt:new Date,order:Math.max(...a.map(e=>e.order||0),0)+1};e(e=>({projects:[...e.projects,u],activeProjectId:d})),(0,n.LZ)({projects:[...a,u],activeProjectId:d,activeConversationId:null}).catch(e=>{console.error("Error saving state:",e)});let v=s();e(e=>({projects:e.projects.map(e=>e.id!==d?e:{...e,conversations:[{id:v,name:"(New Chat)",lastUpdated:new Date,messages:[],createdAt:new Date}],updatedAt:new Date}),activeConversationId:v}));let g=t();(0,n.LZ)({projects:g.projects,activeProjectId:g.activeProjectId,activeConversationId:g.activeConversationId}).catch(e=>{console.error("Error saving state:",e)})},updateProjectSettings:(t,r)=>{e(e=>{let o=e.projects.find(e=>e.id===t),s={...e.apiKeys},i=!1;o&&r.settings&&(r.settings.apiKey!==o.settings.apiKey&&(s.apiKey=r.settings.apiKey||"",i=!0),r.settings.groqApiKey!==o.settings.groqApiKey&&(s.groqApiKey=r.settings.groqApiKey||"",i=!0));let c={...e,apiKeys:i?s:e.apiKeys,projects:e.projects.map(e=>{if(e.id!==t)return e;let o=e.conversations;return r.conversations&&(o=r.conversations.map(t=>{let r=e.conversations.find(e=>e.id===t.id);return r&&"(New Chat)"!==r.name?{...t,name:r.name}:t})),{...e,settings:r.settings?{...e.settings,...r.settings,mcpServerIds:void 0!==r.settings.mcpServerIds?r.settings.mcpServerIds:e.settings.mcpServerIds}:e.settings,conversations:o,updatedAt:new Date}})};return(0,n.LZ)(c).catch(e=>{console.error("Error saving state:",e)}),i&&a(s),c})},deleteProject:r=>{var o,s;let{projects:a,activeProjectId:i}=t(),c=a.find(e=>e.id!==r),l={projects:a.filter(e=>e.id!==r),activeProjectId:i===r&&c?c.id:i,activeConversationId:i===r&&c?null!==(s=null===(o=c.conversations[0])||void 0===o?void 0:o.id)&&void 0!==s?s:null:t().activeConversationId};e(l),(0,n.LZ)(l).catch(e=>{console.error("Error saving state:",e)})},createConversation:(t,r)=>{let o=s();e(e=>{let s={...e,projects:e.projects.map(e=>e.id!==t?e:{...e,conversations:[{id:o,name:r||"(New Chat)",lastUpdated:new Date,createdAt:new Date,messages:[]},...e.conversations],updatedAt:new Date}),activeConversationId:o};return(0,n.LZ)(s).catch(e=>{console.error("Error saving state:",e)}),s})},deleteConversation:(t,r)=>{let o=s();e(e=>{var s,a;let i=e.projects.map(e=>{if(e.id!==t)return e;let n=e.conversations.filter(e=>e.id!==r);if(0===n.length){let t={id:o,name:"(New Chat)",lastUpdated:new Date,messages:[],createdAt:new Date};return{...e,conversations:[t],updatedAt:new Date}}return{...e,conversations:n,updatedAt:new Date}}),c=i.find(e=>e.id===t),l=(null==c?void 0:c.conversations.length)===1?o:e.activeConversationId===r?null!==(a=null==c?void 0:null===(s=c.conversations.find(e=>e.id!==r))||void 0===s?void 0:s.id)&&void 0!==a?a:null:e.activeConversationId,d={...e,projects:i,activeConversationId:l};return(0,n.LZ)(d).catch(e=>{console.error("Error saving state:",e)}),d})},renameConversation:(t,r,o)=>{"(New Chat)"!==o&&e(e=>{let s={...e,projects:e.projects.map(e=>e.id!==t?e:{...e,conversations:e.conversations.map(e=>e.id===r?{...e,name:o}:e),updatedAt:new Date})};return(0,n.LZ)(s).catch(e=>{console.error("Error saving state:",e)}),s})},renameProject:(t,r)=>{e(e=>{let o={...e,projects:e.projects.map(e=>e.id===t?{...e,name:r,updatedAt:new Date}:e)};return(0,n.LZ)(o).catch(e=>{console.error("Error saving state:",e)}),o})},setActiveProject:r=>{let{projects:o}=t(),s=r?o.find(e=>e.id===r):null;e(e=>{let t={...e,activeProjectId:r,activeConversationId:s&&s.conversations.length>0&&!e.activeConversationId?s.conversations[0].id:e.activeConversationId};return(0,n.LZ)(t).catch(e=>{console.error("Error saving state:",e)}),t})},setActiveConversation:t=>{e(e=>{let r={...e,activeConversationId:t};return(0,n.LZ)(r).catch(e=>{console.error("Error saving state:",e)}),r})},addServer:async r=>{e(e=>({servers:[...e.servers,{...r,status:"connecting",error:void 0}]}));try{let o=await d(r),s={servers:t().servers.map(e=>e.id===r.id?o:e)};return e(s),await (0,n.ue)(s.servers),o}catch(s){let o={servers:t().servers.map(e=>e.id===r.id?{...e,status:"error",error:"Connection failed"}:e)};return e(o),(0,n.ue)(o.servers).catch(e=>{console.error("Error saving MCP servers:",e)}),t().servers.find(e=>e.id===r.id)}},removeServer:r=>{c(r);let o={servers:t().servers.filter(e=>e.id!==r)};e(o),(0,n.ue)(o.servers).catch(e=>{console.error("Error saving MCP servers:",e)})},reconnectServer:async r=>{let o=t().servers.find(e=>e.id===r);if(!o)throw Error("Server not found");try{let s=await d(o);return e(e=>({servers:e.servers.map(e=>e.id===r?s:e)})),await (0,n.ue)(t().servers),s}catch(t){throw e(e=>({servers:e.servers.map(e=>e.id===r?{...e,status:"error",error:"Reconnection failed"}:e)})),Error("Failed to reconnect")}},executeTool:async(e,t,o)=>{let n=r.get(e);if(!n||n.readyState!==WebSocket.OPEN)throw Error("Server not connected");return new Promise((e,r)=>{let s=Math.random().toString(36).substring(7),a=t=>{try{let o=JSON.parse(t.data);o.id===s&&(n.removeEventListener("message",a),o.error?r(Error(o.error.message)):e(o.result.content[0].text))}catch(e){console.error("Error parsing tool response"),r(Error("Failed to parse tool response"))}};n.addEventListener("message",a),n.send(JSON.stringify({jsonrpc:"2.0",method:"tools/call",params:{name:t,arguments:o},id:s}))})},attemptLocalMcpConnection:async()=>{let r="localhost-mcp",o=window.location.protocol.endsWith("s:")?"wss":"ws",s="localhost"===window.location.hostname||"127.0.0.1"===window.location.hostname?"ws://localhost:10125":"".concat(o,"://").concat(window.location.host).concat("/fwd-ws:kibitz:nick.hypr"),a=t().servers.find(e=>e.id===r);if(a)return a;try{let o=await d({id:r,name:"Local MCP",uri:s,status:"disconnected"});if("connected"===o.status)return e(e=>({servers:[...e.servers,o]})),await (0,n.ue)(t().servers),o;return null}catch(e){return console.log("Local MCP not available"),null}}}})}}]);